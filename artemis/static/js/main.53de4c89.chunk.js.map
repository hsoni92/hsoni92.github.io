{"version":3,"sources":["Images/logo.svg","Utils/cryptoUtil.js","Utils/Constants.js","Components/AppTitle.jsx","Utils/firebase.js","Utils/CommonUtil.js","Components/CustomComponents.jsx","Components/LoginForm.jsx","Components/NavigationBar.jsx","Utils/APIUtil.js","Components/Dashboard.jsx","Components/ModalClusterDetails.jsx","Components/ModalAddNode.jsx","Components/Cluster.jsx","Components/Storage.jsx","Components/ModalAddUser.jsx","Components/ModalUserAllocation.jsx","Components/Users.jsx","Components/Menu.jsx","Components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","r","__webpack_exports__","Buffer","d","encryptJSON","decryptJSON","crypto","require","jsonObj","secretKey","salt","from","key","pbkdf2Sync","jsonStr","JSON","stringify","iv","randomBytes","cipher","createCipheriv","ciphertext","update","final","hash","createHash","digest","toString","encryptedData","decipher","createDecipheriv","decryptedData","Error","parse","Constants","INSTANCE_URL","CURRENT_PAGE","USERNAME","PASSWORD","ROLE","REMEMBER","APP_NAME","PAGES","USERS_LIST","MAP","DASHBOARD","STORAGE","CLUSTER","ACTIONS","DB_STATUS","LIST_NODE","ADD_NODE","ADD_USER","DELETE_USER","DELETE_NODE","SEARCH_NODE","GET_NODE_CONTENTS","LIST_ALLOCATION","SET_ALLOCATION","LIST_USER","SCHEMA","USER_ROLE","ADMIN","CONSUMER","API_TABLES","USERS","BUSY_MSGS","GREEK_GODS","AppTitle","_renderHTML","name","BaseConstants","split","react_default","a","createElement","style","fontSize","concat","_this","props","size","className","this","Component","extend","initializeApp","getAuth","signInWithEmailAndPassword","updateProfile","createUserWithEmailAndPassword","auth","apiKey","projectId","login","_ref2","Object","asyncToGenerator","regenerator_default","mark","_callee2","email","password","userSpec","wrap","_context2","prev","next","currentUser","toJSON","userData","photoURL","abrupt","t0","stop","_x3","_x4","apply","arguments","unsetInstanceURL","localStorage","removeItem","setcurrentPage","pageName","setItem","getcurrentPage","getItem","setLogin","username","role","setRemember","shouldRemember","isRememberEnabled","getLogin","unsetLogin","refreshPage","window","location","reload","capitalize","string","charAt","toUpperCase","slice","showBusyMessage","Math","floor","random","length","getRandomName","undefined","randomdigits","substring","toLowerCase","successNotification","message","title","store","addNotification","type","insert","container","animationIn","animationOut","dismiss","duration","onScreen","slidingExit","delay","StatusIcon","status","textComponent","colorClass","ProgressBar","percent","color","Progress","Label","basic","LoaderProgress","listRow","text","loaderCustom","Dimmer","active","inverted","Loader","content","CONSTANTS","Login","classCallCheck","_super","call","getInitialData","_callee","isRememberValueEnabled","_getLogin","_context","setState","isRemember","loading","onChange","e","stateName","_this$setState","defineProperty","target","value","handleRemember","objectSpread","state","onClickLogin","_this$state2","loginStatus","loginResponse","error","sent","console","log","errors","onFocus","event","setAttribute","autocomplete","_renderForm","_this$state3","hasErrors","_","isEmpty","Card","Content","height","width","alt","src","Logo","Header","AppTitle_AppTitle","Message","negative","join","Description","Form","autoComplete","readOnly","display","Input","label","Field","Checkbox","checked","Button","onClick","extra","_renderComponents","_this$state4","isDatabaseUP","dbHealth","isInstanceSet","Grid","stretched","columns","verticalAlign","Row","Column","instanceLoading","instanceId","NavigationBar","activeItem","handleItemClick","_ref","setAppLoader","Menu","secondary","Item","position","Dropdown","item","Icon","icon","qs","deployerAction","body","BASE_URL","res","data","_args","axios","post","get","_x","deployerActionDirect","action","option","response","_args2","_x2","isloggedIn","_ref5","_callee5","_getLogin2","_context5","isNil","Dashboard","markLoadingProgress","loadingPercentage","healthPanel","compositeObject","totalUsedStorage","totalAvailableStorage","alerts","storageStatus","push","alertsItem","map","fluid","header","description","circular","Divider","List","databasePanel","dbData","dbReference","dbList","allDBs","creds","labels","datasets","backgroundColor","borderColor","borderWidth","index_modern","options","plugins","legend","round","host","database","storagePanel","countNodes","_statsStorage","CardPanels","items","_statsHTML","meta","_statsUser","Group","usedNodes","allocationData","node_alias","union","Statistic","Value","as","allUsersData","admins","filter","user","consumers","_renderPage","_this$state","nodes","allNodes","forEach","node","available","used","ModalClusterDetails","open","setOpen","setClose","_this2","details","el","email_password","account_password","access_token","client_id","client_secret","index_esm","animation","closeOnDimmerClick","onClose","onOpen","trigger","Modal","alias","image","divided","relaxed","Actions","ModalAddNode","clusterSchema","ignoreFields","schemaStates","stateObject","table","remove","schema","includes","field","defaultValue","handleSubmit","payload","refreshTable","_populateFormFields","column","positive","Cluster","_getInitialState","nodesData","nodeDataSource","selectedEntities","handlePaginationChange","activePage","index","tableRowLength","unshift","handleConfirm","showConfirm","handleConfirmAction","entity","first","search","handleSelect","_renderNodeStatus","ModalClusterDetails_ModalClusterDetails","href","_renderNodeStorage","total","_renderNodeAccessibility","_getUsersForNode","users","allocation","user_id","Popup","flowing","hoverable","_renderClusterTable","tableRowData","dataPath","formatter","tableData","row","hasFormater","results","dp","toConsumableArray","_unused","Pagination","firstItem","lastItem","onPageChange","totalPages","ceil","Table","celled","HeaderCell","Body","cell","Cell","Segment","attached","ModalAddNode_ModalAddNode","labelPosition","primary","button","disabled","placeholder","Confirm","confirmButton","onCancel","onConfirm","versioned","_callee3","_context3","Storage","contentsData","allFiles","contentsDataPaths","contentsDataSourcePaths","contentsDataPathsJSON","files","file","pathSet","pathListToTree","onSearch","debounce","searchx","xpath","searchDef","searchDebounce","_renderTreeLayout","main_default","_formatResultsMessage","nodeAlias","multiple","selection","ModalUserAllocation","allocationSchema","selectedNodes","onSelectChange","_this$setState2","_this$props","_getNodesForUser","target_user","node_csv","_this$props2","info","Users","_getIntitalData","usersData","usersDataSource","target_username","_renderUserAccessibility","ModalAddUser_ModalAddNode","ModalUserAllocation_ModalUserAllocation","isAdmin","CONSTANT","MenuComponent","Components_Dashboard","Components_Cluster","Storage_Storage","Users_Users","vertical","App","dist_default","NavigationBar_NavigationBar","Menu_MenuComponent","loggedIn","_loader","Home","LoginForm","react_router_dom","react_router","exact","path","render","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+HCAxCD,EAAAE,EAAAC,GAAA,SAAAC,GAAAJ,EAAAK,EAAAF,EAAA,gCAAAG,IAAAN,EAAAK,EAAAF,EAAA,gCAAAI,IAAA,IAAMC,EAASC,EAAQ,KAEVH,EAAc,SAACI,EAASC,GACnC,IAAMC,EAAOR,EAAOS,KAAK,oBAAqB,QACxCC,EAAMN,EAAOO,WAAWJ,EAAWC,EAAM,IAAQ,GAAI,UACrDI,EAAUC,KAAKC,UAAUR,GACzBS,EAAKX,EAAOY,YAAY,IACxBC,EAASb,EAAOc,eAAe,cAAeR,EAAKK,GACrDI,EAAaF,EAAOG,OAAOR,EAAS,OAAQ,UAChDO,GAAcF,EAAOI,MAAM,UAC3B,IAAMC,EAAOlB,EAAOmB,WAAW,UAAUH,OAAOD,GAAYK,OAAO,OAMnE,MALsB,CACpBT,GAAIA,EAAGU,SAAS,UAChBN,aACAG,SAKSnB,EAAc,SAACuB,EAAenB,GACzC,IAAMC,EAAOR,EAAOS,KAAK,oBAAqB,QACxCC,EAAMN,EAAOO,WAAWJ,EAAWC,EAAM,IAAQ,GAAI,UACnDO,EAAyBW,EAAzBX,GAAII,EAAqBO,EAArBP,WAAYG,EAASI,EAATJ,KAClBK,EAAWvB,EAAOwB,iBAAiB,cAAelB,EAAKV,EAAOS,KAAKM,EAAI,WACzEc,EAAgBF,EAASP,OAAOD,EAAY,SAAU,QAG1D,GAFAU,GAAiBF,EAASN,MAAM,QACVjB,EAAOmB,WAAW,UAAUH,OAAOD,GAAYK,OAAO,SACtDF,EACpB,MAAM,IAAIQ,MAAM,wDAGlB,OADgBjB,KAAKkB,MAAMF,ofC9BdG,EAAA,CACbC,aAAc,eACdC,aAAc,eACdC,SAAU,WACVC,SAAU,WACVC,KAAM,OACNC,SAAU,WACVC,SAAU,kBACVC,MAAO,CACLC,WAAY,OACZC,IAAK,MACLC,UAAW,YACXC,QAAS,UACTC,QAAS,WAEXC,QAAS,CACPC,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,SAAU,WACVC,YAAa,cACbC,YAAa,cACbC,YAAa,cACbC,kBAAmB,oBACnBC,gBAAiB,kBACjBC,eAAgB,iBAChBC,UAAW,YACXC,OAAQ,UAEVC,UAAW,CACTC,MAAO,QACPC,SAAU,YAEZC,WAAY,CACVjB,QAAS,UACTkB,MAAO,SAETC,UAAW,CACT,8CACA,yCACA,kDACA,qDACA,sCACA,gDACA,oDACA,kDAEFC,WAAY,CACV,UACA,WACA,SACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,SACA,QACA,YACA,WACA,OACA,OACA,UACA,UACA,QACA,SACA,SACA,WACA,SACA,QACA,SACA,QACA,QACA,UACA,WACA,SACA,UACA,WACA,UACA,QACA,UACA,MACA,QACA,aACA,UACA,SACA,WACA,QACA,UACA,WACA,UACA,SACA,OACA,UACA,SACA,OACA,UACA,QACA,SACA,YACA,SACA,YACA,UACA,QACA,UACA,OACA,UACA,UACA,WACA,SACA,OACA,QACA,WACA,UACA,YACA,aACA,OACA,SACA,UACA,SACA,QACA,UACA,OACA,MACA,OACA,UACA,OACA,OACA,WACA,OACA,SACA,SACA,QACA,OACA,OACA,OACA,OACA,UACA,MACA,SACA,UACA,WACA,SACA,OACA,SACA,odC/IiBC,oMACjBC,YAAc,WACV,IAAMC,EAAQC,EAAc9B,SAAU+B,MAAM,KAC5C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,SAAQ,GAAAC,OAAKC,EAAKC,MAAMC,KAAhB,OAA4BC,UAAU,kBACxDT,EAAAC,EAAAC,cAAA,YAAOL,EAAK,GAAZ,KACAG,EAAAC,EAAAC,cAAA,YAAOL,EAAK,kDAIxB,WACI,OAAQa,KAAKd,qBAXiBe,+BCJ9BC,EAAW9E,EAAQ,IAAnB8E,SAIJ9E,EAAQ,KADVF,KADAD,cACAC,aAGAiF,EACE/E,EAAQ,KADV+E,gBAOE/E,EAAQ,KAJVgF,YAGAC,KAFAC,gBACAC,iCACAF,4BAaIG,EAAOJ,EADDD,EALW,CACrBM,OAAQ,GACRC,UAAW,sBAsBAC,EAAK,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAxB,EAAAyB,KAAG,SAAAC,EAAOC,EAAOC,GAAd,IAAAC,EAAA,OAAAL,EAAAxB,EAAA8B,KAAA,SAA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","file":"static/js/main.53de4c89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c8305106.svg\";","const crypto = require('crypto');\n\nexport const encryptJSON = (jsonObj, secretKey) => {\n  const salt = Buffer.from('ThisIsMyFixedSalt', 'utf8');\n  const key = crypto.pbkdf2Sync(secretKey, salt, 100000, 32, 'sha256');\n  const jsonStr = JSON.stringify(jsonObj);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n  let ciphertext = cipher.update(jsonStr, 'utf8', 'base64');\n  ciphertext += cipher.final('base64');\n  const hash = crypto.createHash('sha256').update(ciphertext).digest('hex');\n  const encryptedData = {\n    iv: iv.toString('base64'),\n    ciphertext,\n    hash,\n  };\n  return encryptedData;\n};\n\nexport const decryptJSON = (encryptedData, secretKey) => {\n  const salt = Buffer.from('ThisIsMyFixedSalt', 'utf8');\n  const key = crypto.pbkdf2Sync(secretKey, salt, 100000, 32, 'sha256');\n  const { iv, ciphertext, hash } = encryptedData;\n  const decipher = crypto.createDecipheriv('aes-256-cbc', key, Buffer.from(iv, 'base64'));\n  let decryptedData = decipher.update(ciphertext, 'base64', 'utf8');\n  decryptedData += decipher.final('utf8');\n  const decryptedHash = crypto.createHash('sha256').update(ciphertext).digest('hex');\n  if (decryptedHash !== hash) {\n    throw new Error('Hash mismatch. The data may have been tampered with.');\n  }\n  const jsonObj = JSON.parse(decryptedData);\n  return jsonObj;\n};\n","export default {\n  INSTANCE_URL: 'INSTANCE_URL',\n  CURRENT_PAGE: 'CURRENT_PAGE',\n  USERNAME: 'USERNAME',\n  PASSWORD: 'PASSWORD',\n  ROLE: 'ROLE',\n  REMEMBER: 'REMEMBER',\n  APP_NAME: 'Artemis Cluster',\n  PAGES: {\n    USERS_LIST: 'list',\n    MAP: 'map',\n    DASHBOARD: 'dashboard',\n    STORAGE: 'storage',\n    CLUSTER: 'cluster'\n  },\n  ACTIONS: {\n    DB_STATUS: 'db-status',\n    LIST_NODE: 'list-node',\n    ADD_NODE: 'add-node',\n    ADD_USER: 'add-user',\n    DELETE_USER: 'delete-user',\n    DELETE_NODE: 'delete-node',\n    SEARCH_NODE: 'search-node',\n    GET_NODE_CONTENTS: 'get-node-contents',\n    LIST_ALLOCATION: 'list-allocation',\n    SET_ALLOCATION: 'set-allocation',\n    LIST_USER: 'list-user',\n    SCHEMA: 'schema'\n  },\n  USER_ROLE: {\n    ADMIN: 'admin',\n    CONSUMER: 'consumer'\n  },\n  API_TABLES: {\n    CLUSTER: 'cluster',\n    USERS: 'users'\n  },\n  BUSY_MSGS: [\n    'Loading... Feel free to spin in your chair.',\n    'Loading... Insert quarter to speed up.',\n    'Loading... Turn on speakers for elevator music.',\n    'Loading... I think I am, therefore, I am. I think.',\n    'Loading... Prepare for awesomeness.',\n    'Loading... I am behind you! Ha, ha, gotcha...',\n    'Loading... Please hold on as we reheat our coffee',\n    'Loading... Counting backwards from infinity...'\n  ],\n  GREEK_GODS: [\n    'Abraxas',\n    'Achilles',\n    'Adonis',\n    'Ajax',\n    'Apollo',\n    'Argo',\n    'Ares',\n    'Atlas',\n    'Cadmus',\n    'Castor',\n    'Cronus',\n    'Damon',\n    'Dionysius',\n    'Endymion',\n    'Eros',\n    'Eryx',\n    'Evander',\n    'Griffin',\n    'Hades',\n    'Hector',\n    'Helios',\n    'Herakles',\n    'Hermes',\n    'Homer',\n    'Icarus',\n    'Janus',\n    'Jason',\n    'Leander',\n    'Morpheus',\n    'Nereus',\n    'Oceanus',\n    'Odysseus',\n    'Olimpio',\n    'Orion',\n    'Orpheus',\n    'Pan',\n    'Paris',\n    'Parthenios',\n    'Perseus',\n    'Pollux',\n    'Poseidon',\n    'Priam',\n    'Pyramus',\n    'Thanatos',\n    'Theseus',\n    'Triton',\n    'Troy',\n    'Troilus',\n    'Zephyr',\n    'Zeus',\n    'Acantha',\n    'Alala',\n    'Althea',\n    'Andromeda',\n    'Anthea',\n    'Aphrodite',\n    'Ariadne',\n    'Arete',\n    'Artemis',\n    'Asia',\n    'Asteria',\n    'Astraea',\n    'Atalanta',\n    'Athena',\n    'Aura',\n    'Aegle',\n    'Calliope',\n    'Calypso',\n    'Cassandra',\n    'Cassiopeia',\n    'Clio',\n    'Cybele',\n    'Cynthia',\n    'Daphne',\n    'Delia',\n    'Demeter',\n    'Echo',\n    'Eos',\n    'Gaia',\n    'Halcyon',\n    'Hebe',\n    'Hera',\n    'Hermione',\n    'Hero',\n    'Hestia',\n    'Lanthe',\n    'Irene',\n    'Iris',\n    'Kore',\n    'Leda',\n    'Maia',\n    'Nephele',\n    'Nyx',\n    'Pallas',\n    'Pandora',\n    'Penelope',\n    'Phoebe',\n    'Rhea',\n    'Selene',\n    'Xanthe',\n  ]\n}","import React, { Component } from 'react';\nimport BaseConstants from '../Utils/Constants.js';\n\n\nexport default class AppTitle extends Component {\n    _renderHTML = () => {\n        const name = (BaseConstants.APP_NAME).split(' ');\n        return (\n            <div style={{ fontSize: `${this.props.size}em` }} className=\"app-name-title\">\n                <span>{name[0]} </span>\n                <span>{name[1]}</span>\n            </div>\n        );\n    }\n    render() {\n        return (this._renderHTML());\n    }\n}\n","const { extend } = require('lodash');\nconst {\n  encryptJSON,\n  decryptJSON\n} = require('./cryptoUtil.js');\nconst {\n  initializeApp\n} = require(\"firebase/app\");\nconst {\n  getAuth,\n  updateProfile,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword\n} = require(\"firebase/auth\");\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"\",\n  projectId: \"auth-service-001\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\nconst defaultSpec = {};\n\nexport const createUser = async (email, password, username = 'Icarus CLI', userData = defaultSpec) => {\n  try {\n    const response = await createUserWithEmailAndPassword(auth, email, password);\n    const encData = encryptJSON(userData, password);\n    updateProfile(auth.currentUser, {\n      displayName: username,\n      photoURL: JSON.stringify(encData)\n    });\n    return response;\n  } catch (err) {\n    return null;\n  }\n};\n\nexport const login = async (email, password) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n    const userSpec = auth.currentUser.toJSON();\n    extend(userSpec, { userData: decryptJSON(JSON.parse(userSpec.photoURL), password) });\n    return userSpec;\n  } catch (error) {\n    return null;\n  }\n};\n","import BaseConstants from './Constants.js';\nimport { store } from 'react-notifications-component';\n\nexport const deleteAllKeys = () => {\n    localStorage.clear();\n}\n\nexport const getInstanceURL = () => {\n    return localStorage.getItem(BaseConstants.INSTANCE_URL);\n}\n\nexport const setInstanceURL = (url) => {\n    return localStorage.setItem(BaseConstants.INSTANCE_URL, url);\n}\n\nexport const unsetInstanceURL = () => {\n    return localStorage.removeItem(BaseConstants.INSTANCE_URL);\n}\n\nexport const setcurrentPage = (pageName) => {\n    return localStorage.setItem(BaseConstants.CURRENT_PAGE, pageName);\n}\n\nexport const getcurrentPage = () => {\n    return localStorage.getItem(BaseConstants.CURRENT_PAGE);\n}\n\nexport const setLogin = (username, password, role) => {\n    localStorage.setItem(BaseConstants.USERNAME, username);\n    localStorage.setItem(BaseConstants.PASSWORD, password);\n    localStorage.setItem(BaseConstants.ROLE, role);\n}\n\nexport const setRemember = (shouldRemember) => {\n    return localStorage.setItem(BaseConstants.REMEMBER, shouldRemember);\n}\n\nexport const isRememberEnabled = () => {\n    return localStorage.getItem(BaseConstants.REMEMBER) || false;\n}\n\nexport const securePage = () => {\n    const role = localStorage.getItem(BaseConstants.ROLE);\n    const isAdmin = (role === BaseConstants.USER_ROLE.ADMIN);\n    if (!isAdmin) {\n        localStorage.setItem(BaseConstants.CURRENT_PAGE, BaseConstants.PAGES.DASHBOARD);\n    }\n}\n\nexport const getLogin = () => {\n    return {\n        username: localStorage.getItem(BaseConstants.USERNAME),\n        password: localStorage.getItem(BaseConstants.PASSWORD),\n        role: localStorage.getItem(BaseConstants.ROLE)\n    }\n}\n\nexport const unsetLogin = () => {\n    localStorage.removeItem(BaseConstants.USERNAME);\n    localStorage.removeItem(BaseConstants.PASSWORD);\n    localStorage.removeItem(BaseConstants.ROLE);\n}\n\nexport const refreshPage = () => {\n    window.location.reload();\n}\n\nexport const capitalize = (string) => {\n    if (!string) {\n        return string;\n    }\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport const isFunction = (obj) => {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n};\n\nexport const showBusyMessage = () => {\n    return BaseConstants.BUSY_MSGS[Math.floor((Math.random() * (BaseConstants.BUSY_MSGS.length - 1)) + 0)];\n}\n\nexport const getRandomName = (prefixNumber = true) => {\n    if (prefixNumber) {\n        const randomdigits = (Math.floor(Math.random() * 10000) + 10000).toString().substring(1);\n        return `${BaseConstants.GREEK_GODS[Math.floor((Math.random() * (BaseConstants.GREEK_GODS.length - 1)) + 0)]}_${randomdigits}`.toLowerCase();\n    }\n    return `${BaseConstants.GREEK_GODS[Math.floor((Math.random() * (BaseConstants.GREEK_GODS.length - 1)) + 0)]}`.toLowerCase();\n}\n\nexport const successNotification = (message, title = \"Success\") => {\n    store.addNotification({\n        title,\n        message: message,\n        type: \"success\",\n        insert: \"top\",\n        container: \"top-right\",\n        animationIn: ['animated fadeIn'],\n        animationOut: ['animated fadeOut'],\n        dismiss: {\n            duration: 5000,\n            onScreen: false\n        },\n        slidingExit: {\n            delay: 300\n        }\n    });\n}\n\n\n","import React from 'react';\nimport {\n    Progress,\n    Popup,\n    Divider,\n    Dimmer,\n    Label,\n    Loader,\n    Button,\n    Segment,\n    Grid,\n    List,\n    Message,\n    Card,\n    Icon,\n} from 'semantic-ui-react'\nimport { showBusyMessage } from '../Utils/CommonUtil';\nimport _ from 'lodash';\n\nexport const StatusIcon = (status, textComponent = null) => {\n    status = JSON.parse(status);\n    let colorClass = 'gray-bg';\n    switch (status) {\n        case true:\n            colorClass = 'green-bg';\n            break;\n        case false:\n            colorClass = 'red-bg';\n            break;\n        default:\n            colorClass = 'gray-bg';\n            break;\n    }\n\n    if (textComponent) {\n        if (textComponent === 'auto') {\n            textComponent = status ? 'Up' : 'Down';\n        }\n        return (<div className=\"flex-row\">\n            <div className={`status-icon ${colorClass}`}>\n            </div>\n            <div className=\"status-text-item\">{textComponent}</div>\n        </div>);\n    }\n\n    return <div className={`status-icon ${colorClass}`}></div>;\n}\n\nexport const ProgressBar = (percent, title = null) => {\n    let color = \"grey\";\n    switch (true) {\n        case (percent > 80):\n            color = \"red\";\n            break;\n        case (percent > 20):\n            color = \"yellow\";\n            break;\n        default:\n            color = \"green\";\n            break;\n    }\n    return <div className=\"status-progress-bar\">\n        <Progress className=\"no-margin\" percent={percent} size='tiny' color={color} />\n        {title && <Label basic>{title}</Label>}\n    </div>;\n}\n\nexport const LoaderProgress = (percent) => {\n    const message = showBusyMessage();\n    return (\n        <div className=\"loader-progress-bar\">\n            <Progress percent={percent} color=\"blue\" size='tiny'>\n                {message}\n            </Progress>\n        </div>);\n}\n\n\nexport const listRow = (title, text) => {\n    return (\n        <div className=\"list-item-row\">\n            <div><b>{title}</b></div>\n            <div>{text}</div>\n        </div>);\n}\n\nexport const loaderCustom = () => {\n    return (<Dimmer active inverted>\n        <Loader content='Loading' />\n    </Dimmer>);\n}\n\nexport const truncateIt = (text, limit = 5) => {\n    if (!text) {\n        return text;\n    }\n\n    const truncate = (text) => text.length > limit ? `${text.substring(0, limit)}...` : text;\n    return (<Popup\n        trigger={<a href>{truncate(text)}</a>}\n        content={text}\n        inverted />\n    );\n}\n\nexport const serviceDownSegment = (compositeObject) => {\n    const { dbHealth, onClickRetry, onClickDisconnect } = compositeObject;\n    const isDatabaseUP = (_.get(dbHealth, 'status', 'failed') === 'success');\n    const dbRef = _.get(dbHealth, 'dbReference.credentials', {});\n    const dbError = _.get(dbHealth, 'dbReference.error', 'Database not configured');\n\n    return (\n        <Segment.Group>\n            <Segment>\n                <Message negative>\n                    <Message.Header>Services Down</Message.Header>\n                    <p>One of more services required by the deployer to operate are down. Below are the options you can choose to resolve the issue.</p>\n                </Message>\n                <Segment>\n                    <Grid columns={2} stackable textAlign='center'>\n                        <Divider vertical>Or</Divider>\n                        <Grid.Row verticalAlign='middle'>\n                            <Grid.Column>\n                                <p>I have resolved the deployer server configurations</p>\n                                <Button primary onClick={onClickRetry}>Retry</Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <p>I want to connect to another deployer server instance</p>\n                                <Button negative onClick={onClickDisconnect}>Disconnect</Button>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Segment>\n            </Segment>\n            <Segment.Group horizontal>\n                <Segment className=\"service-down-segment-right\">\n                    <Card>\n                        <div className=\"card-icon-container\">\n                            <Icon name='server' size='huge' />\n                        </div>\n                        <Card.Content>\n                            <Card.Header>Database</Card.Header>\n                            <Card.Meta>\n                                <span className='date'>Service required for storing persistent data for this application</span>\n                            </Card.Meta>\n                            <Card.Description>\n                                <List>\n                                    <List.Item>\n                                        <List.Header></List.Header>\n                                        {listRow('Status', StatusIcon(isDatabaseUP))}\n                                        {listRow('Host', dbRef.host)}\n                                        {listRow('Username', dbRef.username)}\n                                        {listRow('Password', dbRef.password)}\n                                        {listRow('Primary DB', dbRef.database)}\n                                        {listRow('', <div>&nbsp;</div>)}\n                                    </List.Item>\n                                </List>\n                            </Card.Description>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <a href title={dbError}>\n                                <Icon name='info circle' />\n                                Details\n                            </a>\n                        </Card.Content>\n                    </Card>\n                </Segment>\n            </Segment.Group>\n        </Segment.Group>\n    );\n}\n\n","import React, { Component } from 'react';\nimport {\n    Grid,\n    Message,\n    Card,\n    Button,\n    Checkbox,\n    Form\n} from 'semantic-ui-react'\nimport _ from 'lodash';\nimport AppTitle from './AppTitle';\nimport Logo from '../Images/logo.svg';\nimport { login, createUser } from '../Utils/firebase';\nimport { setLogin, refreshPage, setRemember, isRememberEnabled, getLogin } from '../Utils/CommonUtil';\nimport { loaderCustom } from './CustomComponents';\nimport CONSTANTS from '../Utils/Constants';\n\nconst { ACTIONS } = CONSTANTS;\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            instanceLoading: false,\n            dbHealth: {},\n            isDatabaseUP: false,\n            loading: true,\n            instanceId: null,\n            username: '',\n            password: '',\n            errors: []\n        }\n    }\n\n    componentDidMount() {\n        this.getInitialData();\n    }\n\n    getInitialData = async () => {\n        const isRememberValueEnabled = isRememberEnabled();\n        let { username, password } = getLogin();\n        if (!isRememberValueEnabled) {\n            username = '';\n            password = '';\n        }\n\n        this.setState({\n            username,\n            password,\n            isRemember: isRememberValueEnabled,\n            loading: false\n        });\n    }\n\n    onChange = (e, stateName) => {\n        this.setState({\n            [stateName]: e.target.value,\n            errors: []\n        });\n    }\n\n    handleRemember = () => {\n        const { isRemember } = { ...this.state };\n        this.setState({\n            isRemember: !isRemember\n        });\n    }\n\n    onClickLogin = async () => {\n        const { username, password, isRemember } = this.state;\n        let loginStatus = true;\n        let loginResponse = {};\n        let error = '';\n        this.setState({\n            loading: true\n        });\n        try {\n            loginResponse = await login(username, password);\n        } catch (err) {\n            error = err;\n        }\n        console.log('loginResponse --> ', loginResponse)\n\n        if (loginStatus) {\n            setLogin(username, password, 'user');\n            setRemember(isRemember);\n            this.setState({\n                loading: false,\n            });\n            refreshPage();\n        } else {\n            this.setState({\n                loading: false,\n                errors: error\n            });\n        }\n    }\n\n    onFocus = event => {\n        event.target.setAttribute('autocomplete', 'off');\n        console.log(event.target.autocomplete);\n    };\n\n    _renderForm = () => {\n        const { loading, errors } = this.state;\n        const hasErrors = !_.isEmpty(errors);\n\n        const alert = () => {\n            return (\n                <Message className={`alert-message-login ${hasErrors ? '' : 'invisible'}`} negative>\n                    <p>{errors.join(',')}</p>\n                </Message>\n            );\n        };\n\n        const loginForm = () => {\n            return (\n                <Form autoComplete=\"off\">\n                    <input type=\"text\" name=\"\" value=\"\" readOnly={true} style={{ display: \"none\" }} />\n                    <Form.Input\n                        name={\"address \" + Math.random()}\n                        autocomplete=\"off\" onFocus={this.onFocus}\n                        onChange={(e) => this.onChange(e, 'username')}\n                        label=\"Username\" type=\"text\" />\n                    <Form.Input\n                        name={\"address \" + Math.random()}\n                        autocomplete=\"off\" onFocus={this.onFocus}\n                        onChange={(e) => this.onChange(e, 'password')}\n                        label=\"Password\" type=\"password\" />\n                    <Form.Field>\n                        <Checkbox label='Remember Me' checked={this.state.isRemember} onChange={() => this.handleRemember()} />\n                    </Form.Field>\n                    <Button loading={loading} onClick={() => this.onClickLogin()} type='submit'>Login</Button>\n                </Form>\n            );\n        }\n\n        return (\n            <Card className=\"login-card w-100\">\n                <Card.Content>\n                    <div className=\"content-middle-container\">\n                        <div className=\"logo-container\">\n                            <img style={{ height: 75, width: 75 }} alt=\"Lazarus Deployer\" src={Logo} />\n                        </div>\n                        <Card.Header>\n                            <AppTitle />\n                        </Card.Header>\n                        {alert()}\n                        <Card.Description>\n                         { loginForm() }\n                        </Card.Description>\n                    </div>\n                </Card.Content>\n                <Card.Content extra>\n                    <div className=\"content-middle-container content-extra\">\n                        Card Info\n                    </div>\n                </Card.Content>\n            </Card>\n        );\n    }\n\n    _renderComponents = () => {\n        const { dbHealth, isDatabaseUP,\n            isInstanceSet, loading } = this.state;\n        let isServiceDown = false;\n\n        if (isInstanceSet) {\n            if (!isDatabaseUP) {\n                isServiceDown = true;\n            }\n        }\n\n        if (loading && !isInstanceSet) {\n            return (loaderCustom());\n        }\n\n        return (\n            <Grid stretched columns={3} verticalAlign=\"middle\" className=\"grid-full-height\">\n                <Grid.Row>\n                    <Grid.Column></Grid.Column>\n                    <Grid.Column>\n                     { this._renderForm() }\n                    </Grid.Column>\n                    <Grid.Column></Grid.Column>\n                </Grid.Row>\n            </Grid>\n        );\n    }\n\n    render() {\n        return (<div className=\"login-main-container\">\n            {this._renderComponents()}\n        </div>);\n    }\n\n}\n\nexport default Login;","import React, { Component } from 'react'\nimport { Menu, Dropdown, Icon } from 'semantic-ui-react'\nimport { unsetLogin, refreshPage, getLogin, unsetInstanceURL } from '../Utils/CommonUtil';\nimport Logo from '../Images/logo.svg';\nimport AppTitle from './AppTitle';\n\nconst { username } = getLogin();\n\nexport default class NavigationBar extends Component {\n    state = { activeItem: 'home' }\n\n    handleItemClick = (e, { name }) => {\n        this.setState({ activeItem: name });\n        if (name === 'logout') {\n            unsetLogin();\n            this.props.setAppLoader(true);\n            refreshPage();\n        }\n        if (name === 'disconnect') {\n            unsetLogin();\n            unsetInstanceURL();\n            this.props.setAppLoader(true);\n            refreshPage();\n        }\n    }\n\n    render() {\n        return (\n            <Menu secondary className=\"navigation-bar\">\n                <Menu.Item>\n                    <img style={{ height: 45, width: 45 }} alt=\"Message\" src={Logo} />\n                </Menu.Item>\n                <Menu.Item>\n                    <AppTitle size={1.5} />\n                </Menu.Item>\n                <Menu.Menu position='right'>\n                    <Dropdown item text={<div><Icon name='user outline' /> <span>{username}</span></div>}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item icon='setting' text='Settings' />\n                            <Dropdown.Item icon='unlinkify' name=\"disconnect\" text='Disconnect' onClick={this.handleItemClick} />\n                            <Dropdown.Item icon='shutdown' name=\"logout\" text='Logout' onClick={this.handleItemClick} />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Menu>\n            </Menu>\n        )\n    }\n}\n","import axios from 'axios';\nimport _, { isNil } from 'lodash';\nimport { getInstanceURL, getLogin } from './CommonUtil.js';\nconst qs = require('qs');\n\n\nexport const deployerAction = async (body,\n    BASE_URL = getInstanceURL()) => {\n    try {\n        const res = await axios.post(`${BASE_URL}`, qs.stringify(body));\n        const data = _.get(res, 'data', []);\n\n        return {\n            data,\n        };\n    } catch (e) {\n        console.error(e);\n        return {\n            data: [],\n            error: e\n        };\n    }\n};\n\nexport const deployerActionDirect = async (action, option = null) => {\n    const { username, password } = getLogin();\n    let body = { action, username, password };\n    if (option !== null)  {\n        body = _.extend(body, option);\n    }\n    const response = await deployerAction(body);\n    return (response);\n};\n\nexport const validateInstanceURL = async (url) => {\n    const body = { action: 'echo' };\n    const response = await deployerAction(body, url);\n    const isAlive = _.get(response, 'data.isAlive', false);\n    const error = _.get(response, 'error', null);\n\n    if (!isAlive) {\n        const thisError = error ? error : 'This endpoint is not an artemis instance';\n        return ({\n            url,\n            error: [thisError],\n            isValid: false\n        });\n    }\n\n    return ({\n        url,\n        error: [],\n        isValid: true\n    });\n};\n\nexport const login = async (username, password) => {\n    const body = { action: 'login', username, password };\n    const response = await deployerAction(body);\n\n    let loginStatus = _.get(response, 'data.status', 'failed');\n    let userRole = _.get(response, 'data.role', null);\n    loginStatus = (loginStatus === 'failed') ? false : true;\n    const error = _.get(response, 'data.message', 'Login Failed');\n\n    if (!loginStatus) {\n        const thisError = error ? error : 'Login Failed';\n        return ({\n            error: [thisError],\n            loginStatus: false,\n            userRole\n        });\n    }\n\n    return ({\n        error: [],\n        loginStatus: true,\n        userRole\n    });\n};\n\nexport const isloggedIn = async () => {\n    const { username, password } = getLogin();\n    return (!isNil(username) && !isNil(password));\n};","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport {\n  Label,\n  Icon,\n  Header,\n  Grid,\n  Divider,\n  Statistic,\n  Card,\n  List\n} from 'semantic-ui-react'\nimport { Doughnut } from 'react-chartjs-2';\nimport 'semantic-ui-css/semantic.min.css'\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { getLogin } from '../Utils/CommonUtil';\nimport { LoaderProgress, listRow, StatusIcon } from './CustomComponents';\nimport CONSTANTS from '../Utils/Constants';\n\nconst { username } = getLogin();\nconst { ACTIONS } = CONSTANTS;\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loadingPercentage: 20,\n      loading: true,\n      dbData: {},\n      userData: {}\n    }\n  }\n\n  markLoadingProgress = (loadingPercentage) => {\n    this.setState({\n      loadingPercentage\n    });\n  }\n\n  async componentDidMount() {\n    let dbData = await deployerActionDirect(ACTIONS.DB_STATUS);\n    this.markLoadingProgress(30);\n    let userData = await deployerActionDirect(ACTIONS.LIST_USER);\n    this.markLoadingProgress(60);\n    let nodes = await deployerActionDirect(ACTIONS.LIST_NODE, { status: true });\n    this.markLoadingProgress(85);\n    let allocationData = await deployerActionDirect(ACTIONS.LIST_ALLOCATION);\n    allocationData = _.get(allocationData, 'data.rows', []);\n    this.markLoadingProgress(100);\n\n    dbData = _.get(dbData, 'data', {});\n    nodes = _.get(nodes, 'data', {});\n    userData = _.get(userData, 'data', {});\n\n    this.setState({\n      loading: false,\n      dbData,\n      userData,\n      nodes,\n      allocationData\n    });\n  }\n\n  healthPanel = (compositeObject) => {\n    const { totalUsedStorage, totalAvailableStorage } = compositeObject;\n  \n    const alerts = [];\n    let storageStatus = true;\n\n    // Health Checks\n    // Storage within 50% usage\n    if (totalUsedStorage > totalAvailableStorage) {\n      alerts.push('Cluster usage beyond 50%');\n      storageStatus = false;\n    }\n\n    const status = alerts.length > 0 ? 'Warning' : 'Good';\n    const alertsItem = alerts.map(item => {\n      return <div className=\"flex-row pt-10\">\n        <Icon className=\"custom-icon yellow\" name='warning circle' />\n        <div>{item}</div>\n      </div>;\n    })\n\n    const _renderList = () => {\n      return (\n        <List>\n          <List.Item>\n            <List.Header>Monitoring</List.Header>\n            {listRow('Cluster', StatusIcon(true))}\n            {listRow('Storage', StatusIcon(storageStatus))}\n            {listRow('Parity', StatusIcon(true))}\n          </List.Item>\n          <Divider />\n          <List.Item>\n            <List.Header>Alerts</List.Header>\n            {\n              alerts.length > 0\n                ? alertsItem\n                : <div className=\"flex-row flex-jc-c mt-50\">\n                  <div>\n                    <Icon className=\"custom-icon gray\" name='alarm' size='huge' />\n                    <div className=\"mt-10\">No Alerts</div>\n                  </div>\n                </div>}\n          </List.Item>\n\n        </List>\n      );\n    }\n\n    return (\n      <Card fluid>\n        <Card.Content className=\"flex-grow-unset\" header='Health' />\n        <Card.Content\n          description={\n            <div>\n              <div className=\"flex-row flex-jc-c\">\n                <Icon className=\"custom-icon mgreen\" circular name='heartbeat' size='huge' />\n              </div>\n              <div className=\"flex-row flex-jc-c\">\n                <div className=\"mt-10\">{status}</div>\n              </div>\n              <Divider />\n              {_renderList()}\n            </div>\n          }\n        />\n      </Card>\n\n    );\n  }\n\n  databasePanel = (compositeObject) => {\n    const { dbData } = compositeObject;\n    const { dbReference, dbList } = dbData;\n    const allDBs = _.get(dbList, 'rows', []);\n    const creds = _.get(dbReference, 'credentials', []);\n\n    const data = {\n      labels: ['Used', 'Available'],\n      datasets: [\n        {\n          label: 'Number of Tables',\n          data: [allDBs.length, 10],\n          backgroundColor: [\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)'\n          ],\n          borderColor: [\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)'\n          ],\n          borderWidth: 1\n        },\n      ],\n    };\n\n    const options = {\n      plugins: {\n        legend: false\n      }\n    };\n\n    const _renderList = () => {\n      return (\n        <List>\n          <List.Item>\n            <List.Header>Account</List.Header>\n            {listRow('Host', creds.host)}\n            {listRow('Primary Database', creds.database)}\n            {listRow('Username', creds.username)}\n            {listRow('Password', creds.password)}\n          </List.Item>\n          <Divider />\n          <List.Item>\n            <List.Header>DB System</List.Header>\n            {listRow('Databases', allDBs.length)}\n            {listRow('Tables', allDBs.length)}\n          </List.Item>\n        </List>\n      );\n    }\n\n    return (\n      <Card fluid>\n        <Card.Content className=\"flex-grow-unset\" header='Database' />\n        <Card.Content\n          description={\n            <div>\n              <div className=\"card-chart-container\">\n                <Doughnut\n                  options={options}\n                  data={data} />\n              </div>\n              <div>{`Available ${Math.round(allDBs.length / 10 * 100)}%`}</div>\n              <Divider />\n              {_renderList()}\n            </div>\n          }\n        />\n      </Card>\n\n    );\n  }\n\n  storagePanel = (compositeObject) => {\n    const {\n      countNodes,\n      totalUsedStorage,\n      totalAvailableStorage\n    } = compositeObject;\n\n    const data = {\n      labels: ['Used', 'Available'],\n      datasets: [\n        {\n          label: 'Number of Nodes',\n          data: [totalUsedStorage, totalAvailableStorage],\n          backgroundColor: [\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)'\n          ],\n          borderColor: [\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)'\n          ],\n          borderWidth: 1\n        },\n      ],\n    };\n\n    const options = {\n      plugins: {\n        legend: false\n      }\n    };\n\n    const _renderList = () => {\n      return (\n        <List>\n          <List.Item>\n            <List.Header>Account</List.Header>\n            {listRow('User', username)}\n            {listRow('Nodes Allocated', countNodes)}\n            {listRow('Storage Available', `${totalAvailableStorage}G /${totalAvailableStorage + totalUsedStorage}G`)}\n          </List.Item>\n        </List>\n      );\n    }\n\n    return (\n      <Card fluid>\n        <Card.Content className=\"flex-grow-unset\" header='Storage' />\n        <Card.Content\n          description={\n            <div>\n              <div className=\"card-chart-container\">\n                <Doughnut\n                  options={options}\n                  data={data} />\n              </div>\n              <div>{`Available ${Math.round(totalAvailableStorage / (totalUsedStorage + totalAvailableStorage) * 100)}%`}</div>\n              <Divider />\n              {this._statsStorage(compositeObject)}\n              <Divider />\n              {_renderList()}\n            </div>\n          }\n        />\n      </Card>\n\n    );\n  }\n\n  CardPanels = (compositeObject) => {\n    const items = [\n      {\n        header: 'Nodes',\n        description: this._statsHTML(compositeObject),\n        meta: <Divider />,\n      },\n      {\n        header: <Header className=\"header-with-label\" size='medium'>Users</Header>,\n        description: this._statsUser(compositeObject),\n        meta: <Divider />,\n      }\n    ];\n    return (<Card.Group className=\"dashboard-cards-group\" items={items} />);\n  }\n\n  _statsHTML = (compositeObject) => {\n    const { countNodes, allocationData } = compositeObject;\n    let usedNodes = allocationData.map(item => {\n      return item.node_alias;\n    });\n    usedNodes = _.union(usedNodes);\n    return (\n      <div>\n        <Statistic>\n          <Statistic.Value>{countNodes}</Statistic.Value>\n        </Statistic>\n        <Divider />\n        <List>\n          <List.Item>\n            {listRow('Available', <Label as='a' basic color='blue'>{countNodes}</Label>)}\n            {listRow('Used', <Label as='a' basic color='blue'>{usedNodes.length}</Label>)}\n            {listRow('Unused', <Label as='a' basic color='blue'>{countNodes - usedNodes.length}</Label>)}\n          </List.Item>\n        </List>\n      </div>\n    );\n  }\n\n  _statsStorage = (compositeObject) => {\n    const { totalAvailableStorage, totalUsedStorage } = compositeObject;\n    return (\n      <Statistic size=\"mini\">\n        <Statistic.Value>{`${totalAvailableStorage}GB / ${totalAvailableStorage + totalUsedStorage}GB`}</Statistic.Value>\n      </Statistic>\n    );\n  }\n\n  _statsUser = (compositeObject) => {\n    const { allUsersData } = compositeObject;\n    const admins = _.filter(allUsersData, user => {\n      return (user.role === CONSTANTS.USER_ROLE.ADMIN);\n    });\n    const consumers = _.filter(allUsersData, user => {\n      return (user.role === CONSTANTS.USER_ROLE.CONSUMER);\n    });\n    return (\n      <div>\n        <Statistic>\n          <Statistic.Value>{allUsersData.length}</Statistic.Value>\n        </Statistic>\n        <Divider />\n        <List>\n          <List.Item>\n            {listRow('Admin', <Label as='a' basic color='blue'>{admins.length}</Label>)}\n            {listRow('Consumers', <Label as='a' basic color='blue'>{consumers.length}</Label>)}\n          </List.Item>\n        </List>\n      </div>\n    );\n  }\n\n  _renderPage = () => {\n    const { loading, nodes, userData, allocationData, loadingPercentage, dbData } = this.state;\n    const allUsersData = _.get(userData, 'rows', []);\n    const allNodes = _.get(nodes, 'rows', []);\n    const countNodes = _.get(nodes, 'count', []);\n\n    let totalAvailableStorage = 0;\n    let totalUsedStorage = 0;\n\n    allNodes.forEach(node => {\n      const available = _.get(node, 'available_space_gigabytes', 0);\n      const used = _.get(node, 'used_space_gigabytes', 0);\n      totalAvailableStorage = totalAvailableStorage + available;\n      totalUsedStorage = totalUsedStorage + used;\n    });\n    totalAvailableStorage = Math.round(totalAvailableStorage);\n    totalUsedStorage = Math.round(totalUsedStorage, 2);\n\n    const compositeObject = {\n      dbData,\n      countNodes,\n      totalUsedStorage,\n      totalAvailableStorage,\n      allUsersData,\n      allocationData\n    };\n\n    if (loading) {\n      return LoaderProgress(loadingPercentage);\n    }\n\n    return (\n      <Grid stretched columns={4}>\n        <Grid.Row>\n          <Grid.Column>\n            {this.healthPanel(compositeObject)}\n          </Grid.Column>\n          <Grid.Column>\n            {this.storagePanel(compositeObject)}\n          </Grid.Column>\n          <Grid.Column>\n            {this.CardPanels(compositeObject)}\n          </Grid.Column>\n          <Grid.Column>\n            {this.databasePanel(compositeObject)}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n\n  render() {\n    console.log(this.state);\n    return (<div className=\"dashboard-page\">{this._renderPage()}</div>);\n  }\n}\n\nexport default Dashboard;\n\n","import React, { Component } from 'react'\nimport _ from 'lodash';\nimport { Button, List, Modal } from 'semantic-ui-react'\nimport { TransitionModal } from 'semantic-ui-react-transition-modal';\n\nexport default class ModalClusterDetails extends Component {\n    state = {\n        open: false\n    }\n    setOpen = () => {\n        this.setState({ open: true });\n    }\n    setClose = () => {\n        this.setState({ open: false });\n    }\n    render() {\n        const { node } = this.props;\n        const dbReference = _.get(node, 'dbReference', {});\n\n        const details = [\n            {\n                header: 'Email Credentials',\n                icon: 'mail',\n                el: `${dbReference.email} / ${dbReference.email_password}`\n            },\n            {\n                header: 'Storage Credentials',\n                icon: 'hdd',\n                el: `${dbReference.email} / ${dbReference.account_password}`\n            },\n            {\n                header: 'Access Token',\n                icon: 'key',\n                el: `${dbReference.access_token}`\n            },\n            {\n                header: 'Client ID',\n                icon: 'key',\n                el: `${dbReference.client_id}`\n            },\n            {\n                header: 'Client Secret',\n                icon: 'key',\n                el: `${dbReference.client_secret}`\n            }\n        ];\n\n        return (\n            <TransitionModal\n                animation=\"fade up\"\n                closeOnDimmerClick={false}\n                duration={200}\n                onClose={() => this.setClose()}\n                onOpen={() => this.setOpen()}\n                open={this.state.open}\n                trigger={this.props.trigger}\n            >\n                <Modal.Header>{dbReference.alias}</Modal.Header>\n                <Modal.Content image>\n                    <Modal.Description>\n                        <List divided relaxed>\n                            {\n                                details.map(item => {\n                                    return (\n                                        <List.Item>\n                                            <List.Icon name={item.icon || 'github'} size='large' verticalAlign='middle' />\n                                            <List.Content>\n                                                <List.Header as='a'>{item.header}</List.Header>\n                                                <List.Description as='a'>{item.el}</List.Description>\n                                            </List.Content>\n                                        </List.Item>\n                                    );\n                                })\n                            }\n                        </List>\n                    </Modal.Description>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setClose(false)}>\n                        Close\n                    </Button>\n                </Modal.Actions>\n            </TransitionModal>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Button, Message, Form, Modal, Input } from 'semantic-ui-react';\nimport { TransitionModal } from 'semantic-ui-react-transition-modal';\nimport _ from 'lodash';\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { getRandomName, successNotification } from '../Utils/CommonUtil';\n\nimport CONSTANTS from '../Utils/Constants';\n\nconst { ACTIONS } = CONSTANTS;\n\nexport default class ModalAddNode extends Component {\n  state = {\n    open: false,\n    clusterSchema: [],\n    errors: []\n  }\n\n  onChange = (e, stateName) => {\n    this.setState({\n      [stateName]: e.target.value,\n      errors: []\n    });\n  }\n\n\n  setOpen = async () => {\n    let clusterSchema = await deployerActionDirect(ACTIONS.SCHEMA, { table: 'cluster' });\n    clusterSchema = _.get(clusterSchema, 'data.columns', []);\n\n    const ignoreFields = [\n      'timestamp_created',\n      'app_name'\n    ];\n    clusterSchema = _.remove(clusterSchema, schema => {\n      return !ignoreFields.includes(schema);\n    });\n\n    let schemaStates = {};\n    clusterSchema.forEach(field => {\n      let defaultValue = null;\n      if (field === 'alias') {\n        defaultValue = getRandomName();\n      }\n      schemaStates = _.extend(schemaStates, { [field]: defaultValue });\n\n    });\n\n    const stateObject = _.extend(schemaStates, {\n      loading: false,\n      clusterSchema,\n      open: true\n    });\n\n    this.setState(stateObject);\n  }\n\n  setClose = () => {\n    this.setState({ open: false });\n  }\n\n  handleSubmit = async () => {\n    const { clusterSchema } = this.state;\n    let payload = {};\n    clusterSchema.forEach(item => {\n      payload = _.extend(payload, { [item]: _.get(this.state, item, null) });\n    });\n    let response = await deployerActionDirect(ACTIONS.ADD_NODE, payload);\n    response = _.get(response, 'data', {});\n    if (response.status === \"success\") {\n      this.setClose();\n      this.props.refreshTable();\n      successNotification(response.message);\n    } else {\n      const errors = [];\n      errors.push(_.get(response, 'error', null));\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  _populateFormFields = () => {\n    const { clusterSchema } = this.state;\n\n    const fields = clusterSchema.map(column => {\n      switch (column) {\n        case 'alias':\n          return (<div>\n            <Input fluid label={column} onChange={(e) => this.onChange(e, column)} value={this.state[column]} />\n          </div>);\n        default:\n          return (<div>\n            <Input fluid label={column} onChange={(e) => this.onChange(e, column)} value={this.state[column]} />\n          </div>);\n      }\n    });\n\n    return fields;\n  }\n\n  render() {\n    return (\n      <TransitionModal\n        closeOnDimmerClick={false}\n        animation=\"fade up\"\n        duration={200}\n        onClose={() => this.setClose()}\n        onOpen={() => this.setOpen()}\n        open={this.state.open}\n        trigger={this.props.trigger}\n      >\n        <Modal.Header>Add Node</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Form error>\n              <div className=\"add-node-form-body\">\n                <Message\n                  className={this.state.errors.length > 0 ? 'visible' : 'invisible'}\n                  error\n                  header='Failed'\n                  content={this.state.errors.join('. ')}\n                />\n                {this._populateFormFields()}\n              </div>\n            </Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={() => this.setClose()}>\n            Cancel\n          </Button>\n          <Button\n            content=\"Submit\"\n            onClick={() => this.handleSubmit()}\n            positive\n          />\n        </Modal.Actions>\n      </TransitionModal>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport {\n  Confirm,\n  Pagination,\n  Input,\n  Popup,\n  Dropdown,\n  Icon,\n  Button,\n  Table,\n  Segment,\n  Header,\n  Message,\n  Checkbox,\n} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { showBusyMessage, capitalize, successNotification } from '../Utils/CommonUtil';\nimport CONSTANTS from '../Utils/Constants';\nimport { StatusIcon, ProgressBar, LoaderProgress } from './CustomComponents';\nimport ModalClusterDetails from './ModalClusterDetails.jsx';\nimport ModalAddNode from './ModalAddNode.jsx';\n\nconst { ACTIONS } = CONSTANTS;\n\nclass Cluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tableRowLength = 5;\n\n    this.state = {\n      loadingPercentage: 10,\n      showConfirm: false,\n      activePage: 1,\n      versioned: true,\n      value: 1,\n      loading: true,\n      nodesData: [],\n      nodeDataSource: [],\n      allocationData: [],\n      selectedEntities: []\n    }\n  }\n\n  async componentDidMount() {\n    await this._getInitialState();\n  }\n\n  markLoadingProgress = (loadingPercentage) => {\n    this.setState({\n      loadingPercentage\n    });\n  }\n\n  _getInitialState = async () => {\n    let nodesData = await deployerActionDirect(ACTIONS.LIST_NODE, { status: true });\n    nodesData = _.get(nodesData, 'data.rows', []);\n    this.markLoadingProgress(60);\n    let allocationData = await deployerActionDirect(ACTIONS.LIST_ALLOCATION);\n    allocationData = _.get(allocationData, 'data.rows', []);\n    const nodeDataSource = nodesData;\n    this.markLoadingProgress(100);\n\n    this.setState({\n      loading: false,\n      nodesData,\n      nodeDataSource,\n      allocationData,\n      selectedEntities: []\n    });\n\n    this.handlePaginationChange(null, { activePage: 1 });\n  }\n\n  handlePaginationChange = (e, { activePage }) => {\n    let { nodeDataSource } = { ...this.state };\n    let nodesData = [];\n    for (let index = ((activePage - 1) * this.tableRowLength); index <= ((activePage * this.tableRowLength) - 1); index++) {\n      if (index < nodeDataSource.length) {\n        nodesData.unshift(nodeDataSource[index]);\n      }\n    }\n\n    this.setState({\n      nodesData,\n      activePage\n    });\n  }\n\n  handleConfirm = (value) => {\n    this.setState({\n      showConfirm: value\n    });\n  }\n\n  handleConfirmAction = async () => {\n    const { selectedEntities } = this.state;\n    const entity = _.first(selectedEntities);\n    let response = await deployerActionDirect(ACTIONS.DELETE_NODE, { alias: entity });\n    successNotification(_.get(response, 'message', 'Node deletion successful'));\n    this.handleConfirm(false);\n    await this._getInitialState();\n  }\n\n  onChange = (e) => {\n    const search = e.target.value;\n    let { nodeDataSource } = this.state;\n    let nodesData = _.filter(nodeDataSource, node => {\n      return node.dbReference.alias.includes(search);\n    });\n    this.setState({\n      nodesData,\n      errors: []\n    });\n  }\n\n  handleSelect = (alias) => {\n    let { selectedEntities } = { ...this.state };\n    const entitySelected = _.includes(selectedEntities, alias);\n    if (entitySelected) {\n      selectedEntities = _.remove(selectedEntities, function (entity) {\n        return (entity !== alias);\n      });\n    } else {\n      selectedEntities.push(alias);\n    }\n    this.setState({\n      selectedEntities\n    });\n  }\n\n  _renderNodeStatus = (status, alias, node) => {\n    return StatusIcon((status === \"success\"), <ModalClusterDetails node={node} trigger={<a className=\"link-custom\" href>{capitalize(alias)}</a>} />);\n  }\n  _renderNodeStorage = (percent, used, total) => {\n    return ProgressBar(percent, `${used}/ ${total}`);\n  }\n  _renderNodeAccessibility = (status) => {\n    return JSON.parse(status) ? <Icon color='green' name='checkmark' size='large' /> : <div />;\n  }\n  _getUsersForNode = (alias) => {\n    const { allocationData } = this.state;\n    const thisNodeAllocationList = _.filter(allocationData, (allocation) => {\n      return (allocation.node_alias === alias);\n    });\n    let users = thisNodeAllocationList.map(item => {\n      return item.user_id;\n    });\n    users = _.union(users);\n    if (users.length === 0) {\n      return <Button>{users.length}</Button>;\n    }\n    return (<Popup trigger={<Button>{users.length}</Button>} flowing hoverable>\n      <div>\n        {\n          users.map(user => {\n            return <div>{user}</div>;\n          })\n        }\n      </div>\n    </Popup>)\n  }\n\n  _renderClusterTable = (data) => {\n    let tableRowData = [\n      {\n        header: '',\n        dataPath: ['dbReference.alias'],\n        formatter: (alias) => (<Checkbox checked={_.includes(this.state.selectedEntities, alias)}\n          onChange={() => this.handleSelect(alias)} />)\n      },\n      {\n        header: 'Node',\n        dataPath: ['status', 'dbReference.alias', '[object]'],\n        formatter: this._renderNodeStatus\n      },\n      {\n        header: 'Email',\n        dataPath: ['credentials.email']\n      },\n      {\n        header: 'Storage',\n        dataPath: ['percent_used', 'used_space', 'total_space'],\n        formatter: this._renderNodeStorage\n      },\n      {\n        header: 'Users',\n        dataPath: ['dbReference.alias'],\n        formatter: this._getUsersForNode\n      },\n      {\n        header: 'Acessible',\n        dataPath: ['dbReference.is_accessible'],\n        formatter: this._renderNodeAccessibility\n      }\n    ];\n\n    const tableData = data.map(row => {\n      return tableRowData.map(item => {\n        const hasFormater = _.get(item, 'formatter', null);\n        if (hasFormater) {\n          // Handle if function output is passed instead of reference\n          try {\n            const results = item.dataPath.map(dp => {\n              if (dp === '[object]') {\n                return row;\n              }\n              return _.get(row, dp, '-');\n            });\n            return hasFormater(...results);\n          } catch {\n            return hasFormater || '-';\n          }\n        }\n        return _.get(row, item.dataPath[0], '-');\n      });\n    });\n\n    if (_.isEmpty(data)) {\n      return (LoaderProgress(this.state.loadingPercentage));\n    }\n\n    return (\n      <div>\n        <div className=\"w-100 flex-row flex-jc-fe\">\n          <Pagination\n            firstItem={null}\n            lastItem={null}\n            activePage={this.state.activePage}\n            onPageChange={this.handlePaginationChange}\n            totalPages={Math.ceil(this.state.nodeDataSource.length / this.tableRowLength)}\n          />\n        </div>\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              {\n                tableRowData.map(item => {\n                  return <Table.HeaderCell>{item.header}</Table.HeaderCell>;\n                })\n              }\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {\n              tableData.map(row => {\n                return <Table.Row>{\n                  row.map(cell => {\n                    return <Table.Cell>{cell}</Table.Cell>\n                  })\n                }</Table.Row>;\n              })\n            }\n          </Table.Body>\n        </Table>\n      </div>\n    )\n  }\n\n  _renderPage = () => {\n    const { nodesData, nodeDataSource, loading, showConfirm, selectedEntities } = this.state;\n\n    return (\n      <Segment.Group>\n        <Header as='h5' attached='top'>\n          <div>Cluster</div>\n        </Header>\n        <Segment>\n          <div className=\"flex-row flex-jc-sb\">\n            <div>\n              <ModalAddNode\n                refreshTable={this._getInitialState}\n                trigger={<Button icon labelPosition='right' primary>\n                  <Icon name='add' />\n                  Node\n                </Button>} />\n\n              <Dropdown\n                button\n                text='Actions'>\n                <Dropdown.Menu>\n                  <Dropdown.Item disabled={(selectedEntities.length !== 1)} text='Update' />\n                  <Dropdown.Item disabled={(selectedEntities.length !== 1)} onClick={() => this.handleConfirm(true)} text='Delete' />\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n            <Input icon='search' onChange={(e) => this.onChange(e)} placeholder='Search...' />\n          </div>\n          <Message>\n            {loading ? <p>{showBusyMessage()}</p> : (nodeDataSource.length > 0) && <p>Viewing all {nodeDataSource.length} Nodes</p>}\n          </Message>\n        </Segment>\n        <Segment>\n          <Confirm\n            confirmButton={<Button negative>\n              Delete\n            </Button>}\n            open={showConfirm}\n            content={`Are you sure you want delete: ${selectedEntities.join(\", \")} ?`}\n            onCancel={() => this.handleConfirm(false)}\n            onConfirm={this.handleConfirmAction}\n          />\n          {this._renderClusterTable(nodesData)}\n        </Segment>\n      </Segment.Group>\n    );\n  }\n\n  render() {\n    return (this._renderPage());\n  }\n}\n\nexport default Cluster;\n\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport {\n  Input,\n  Dropdown,\n  Icon,\n  Button,\n  Segment,\n  Header,\n  Message,\n} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport pathListToTree from 'path-list-to-tree';\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { showBusyMessage } from '../Utils/CommonUtil';\nimport CONSTANTS from '../Utils/Constants';\nimport { LoaderProgress } from './CustomComponents';\nimport ModalAddNode from './ModalAddNode.jsx';\nimport ReactJson from 'react-json-view'\n\n\nconst { ACTIONS } = CONSTANTS;\n\nexport default class Storage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tableRowLength = 5;\n\n    this.state = {\n      loadingPercentage: 10,\n      showConfirm: false,\n      activePage: 1,\n      value: 1,\n      loading: true,\n      nodesData: [],\n      contentsData: [],\n    }\n  }\n\n  async componentDidMount() {\n    await this._getInitialState();\n  }\n\n  markLoadingProgress = (loadingPercentage) => {\n    this.setState({\n      loadingPercentage\n    });\n  }\n\n  _getInitialState = async () => {\n    let nodesData = await deployerActionDirect(ACTIONS.LIST_NODE, { status: true });\n    nodesData = _.get(nodesData, 'data.rows', []);\n    this.markLoadingProgress(60);\n    let contentsData = await deployerActionDirect(ACTIONS.GET_NODE_CONTENTS);\n    contentsData = _.get(contentsData, 'data.result', []);\n    this.markLoadingProgress(100);\n\n    let allFiles = contentsData.map(node => {\n      const { alias, files } = node;\n      return files.map(file => {\n        return `${alias}${file}`;\n      })\n    });\n\n    let contentsDataPaths = [];\n    allFiles.forEach(pathSet => {\n      contentsDataPaths = contentsDataPaths.concat(pathSet);\n    });\n    const contentsDataSourcePaths = contentsDataPaths;\n    const contentsDataPathsJSON = pathListToTree(contentsDataPaths);\n\n    this.setState({\n      loading: false,\n      nodesData,\n      contentsData,\n      contentsDataPaths,\n      contentsDataSourcePaths,\n      contentsDataPathsJSON\n    });\n  }\n\n  onSearch = (e) => {\n    const search = e.target.value;\n\n    const searchDef = (searchx) => {\n      let { contentsDataSourcePaths } = this.state;\n      let contentsDataPaths = _.filter(contentsDataSourcePaths, xpath => {\n        return xpath.includes(searchx);\n      });\n      this.setState({\n        contentsDataPaths,\n        contentsDataPathsJSON: pathListToTree(contentsDataPaths),\n        errors: []\n      });\n    }\n\n    const searchDebounce = _.debounce(function (searchx) {\n      searchDef(searchx);\n    }, 500);\n    searchDebounce(search);\n  }\n\n  _renderTreeLayout = (data) => {\n    const { loading } = this.state;\n\n    if (loading) {\n      return (LoaderProgress(this.state.loadingPercentage));\n    }\n\n    if (_.isEmpty(data)) {\n      return (<div>No results</div>);\n    }\n\n    return (<ReactJson src={data} />);\n  }\n\n  _formatResultsMessage = (contentsDataPaths, contentsDataSourcePaths) => {\n    if (contentsDataPaths.length !== contentsDataSourcePaths.length) {\n      return `Filtered ${contentsDataPaths.length} out of ${contentsDataSourcePaths.length} files`;\n    }\n    return `Viewing all ${contentsDataPaths.length} files`;\n  }\n\n  _renderPage = () => {\n    const { nodesData, contentsDataPathsJSON, contentsDataPaths,\n      contentsDataSourcePaths, loading } = this.state;\n    const options = nodesData.map(node => {\n      const nodeAlias = _.get(node, 'dbReference.alias', '-')\n      return { key: nodeAlias, text: nodeAlias, value: nodeAlias };\n    });\n\n    return (\n      <Segment.Group>\n        <Header as='h5' attached='top'>\n          <div>Storage</div>\n        </Header>\n        <Segment>\n          <Dropdown\n            placeholder='Select Node' disabled={loading} loading={loading} fluid multiple selection options={options}\n          />\n        </Segment>\n        <Segment>\n          <div className=\"flex-row flex-jc-sb\">\n            <div>\n              <ModalAddNode\n                refreshTable={this._getInitialState}\n                trigger={<Button icon labelPosition='right' primary>\n                  <Icon name='upload' />\n                  Upload\n                </Button>} />\n              <Dropdown\n                button\n                text='Actions'>\n                <Dropdown.Menu>\n                  <Dropdown.Item text='Update' />\n                  <Dropdown.Item text='Delete' />\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n            <Input icon='search' onChange={(e) => this.onSearch(e)} placeholder='Search...' />\n          </div>\n          <Message>\n            {loading ? <p>{showBusyMessage()}</p> : (contentsDataPaths.length > 0) && <p>{this._formatResultsMessage(contentsDataPaths,\n              contentsDataSourcePaths)}</p>}\n          </Message>\n        </Segment>\n        <Segment className=\"scrollable-segment\">\n          {this._renderTreeLayout(contentsDataPathsJSON)}\n        </Segment>\n      </Segment.Group>\n    );\n  }\n\n  render() {\n    return (this._renderPage());\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Message, Form, Modal, Input } from 'semantic-ui-react';\nimport { TransitionModal } from 'semantic-ui-react-transition-modal';\nimport _ from 'lodash';\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { getRandomName, successNotification } from '../Utils/CommonUtil';\n\nimport CONSTANTS from '../Utils/Constants';\n\nconst { ACTIONS } = CONSTANTS;\n\nexport default class ModalAddNode extends Component {\n  state = {\n    open: false,\n    clusterSchema: [],\n    errors: []\n  }\n\n  onChange = (e, stateName) => {\n    this.setState({\n      [stateName]: e.target.value,\n      errors: []\n    });\n  }\n\n\n  setOpen = async () => {\n    let clusterSchema = await deployerActionDirect(ACTIONS.SCHEMA, { table: 'users' });\n    clusterSchema = _.get(clusterSchema, 'data.columns', []);\n\n    const ignoreFields = [\n      'timestamp_created',\n      'app_name'\n    ];\n    clusterSchema = _.remove(clusterSchema, schema => {\n      return !ignoreFields.includes(schema);\n    });\n\n    let schemaStates = {};\n    clusterSchema.forEach(field => {\n      let defaultValue = null;\n      if (field === 'alias') {\n        defaultValue = getRandomName();\n      }\n      schemaStates = _.extend(schemaStates, { [field]: defaultValue });\n\n    });\n\n    const stateObject = _.extend(schemaStates, {\n      loading: false,\n      clusterSchema,\n      open: true\n    });\n\n    this.setState(stateObject);\n  }\n\n  setClose = () => {\n    this.setState({ open: false });\n  }\n\n  handleSubmit = async () => {\n    const { clusterSchema } = this.state;\n    let payload = {};\n    clusterSchema.forEach(item => {\n      let key = item;\n      if (item === 'username') {\n        key = 'target_username';\n      }\n      if (item === 'password') {\n        key = 'target_password';\n      }\n      payload = _.extend(payload, { [key]: _.get(this.state, item, null) });\n    });\n    let response = await deployerActionDirect(ACTIONS.ADD_USER, payload);\n    response = _.get(response, 'data', {});\n    if (response.status === \"success\") {\n      this.setClose();\n      this.props.refreshTable();\n      successNotification(response.message);\n    } else {\n      const errors = [];\n      errors.push(_.get(response, 'error', null));\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  _populateFormFields = () => {\n    const { clusterSchema } = this.state;\n\n    const fields = clusterSchema.map(column => {\n      switch (column) {\n        case 'alias':\n          return (<div>\n            <Input fluid label={column} onChange={(e) => this.onChange(e, column)} value={this.state[column]} />\n          </div>);\n        default:\n          return (<div>\n            <Input fluid label={column} onChange={(e) => this.onChange(e, column)} value={this.state[column]} />\n          </div>);\n      }\n    });\n\n    return fields;\n  }\n\n  render() {\n    return (\n      <TransitionModal\n        closeOnDimmerClick={false}\n        animation=\"fade up\"\n        duration={200}\n        onClose={() => this.setClose()}\n        onOpen={() => this.setOpen()}\n        open={this.state.open}\n        trigger={this.props.trigger}\n      >\n        <Modal.Header>Add Node</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Form error>\n              <div className=\"add-node-form-body\">\n                <Message\n                  className={this.state.errors.length > 0 ? 'visible' : 'invisible'}\n                  error\n                  header='Failed'\n                  content={this.state.errors.join('. ')}\n                />\n                {this._populateFormFields()}\n              </div>\n            </Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={() => this.setClose()}>\n            Cancel\n          </Button>\n          <Button\n            content=\"Submit\"\n            onClick={() => this.handleSubmit()}\n            positive\n          />\n        </Modal.Actions>\n      </TransitionModal>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, Message, Form, Modal, Input, Dropdown } from 'semantic-ui-react';\nimport { TransitionModal } from 'semantic-ui-react-transition-modal';\nimport _ from 'lodash';\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { successNotification } from '../Utils/CommonUtil';\n\nimport CONSTANTS from '../Utils/Constants';\n\nconst { ACTIONS } = CONSTANTS;\n\nexport default class ModalUserAllocation extends Component {\n  state = {\n    open: false,\n    allocationSchema: [],\n    selectedNodes: []\n  }\n\n  async componentDidMount() {\n    let allocationSchema = await deployerActionDirect(ACTIONS.SCHEMA, { table: 'allocations' });\n\n    allocationSchema = _.get(allocationSchema, 'data.columns', []);\n    let schemaStates = {};\n\n    allocationSchema.forEach(field => {\n      let defaultValue = null;\n      schemaStates = _.extend(schemaStates, { [field]: defaultValue });\n    });\n\n    const stateObject = _.extend(schemaStates, {\n      loading: false,\n      allocationSchema\n    });\n\n    this.setState(stateObject);\n  }\n\n  onChange = (e, stateName) => {\n    this.setState({\n      [stateName]: e.target.value,\n      errors: []\n    });\n  }\n\n  onSelectChange = (value, stateName) => {\n    this.setState({\n      [stateName]: value,\n      errors: []\n    });\n  }\n\n  setOpen = () => {\n    let { selectedEntities, allocationData } = this.props;\n    const username = _.first(selectedEntities);\n    const selectedNodes = this._getNodesForUser(username, allocationData);\n\n    this.setState({\n      open: true,\n      selectedNodes\n    });\n  }\n\n  setClose = () => {\n    this.setState({ open: false });\n  }\n\n  handleSubmit = async () => {\n    const { selectedNodes } = this.state;\n    let { selectedEntities } = this.props;\n    const username = _.first(selectedEntities);\n    let response = await deployerActionDirect(ACTIONS.SET_ALLOCATION, { target_user: username, node_csv: selectedNodes.join(',') });\n    response = _.get(response, 'data', {});\n    if (response.status === \"success\") {\n      this.setClose();\n      successNotification(response.message);\n      this.props.refreshTable();\n    } else {\n      const errors = [];\n      errors.push(_.get(response, 'error', null));\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  _getNodesForUser = (username, allocationData) => {\n    const thisNodeAllocationList = _.filter(allocationData, (allocation) => {\n      return (allocation.user_id === username);\n    });\n    let nodes = thisNodeAllocationList.map(item => {\n      return item.node_alias;\n    });\n    nodes = _.union(nodes);\n    return nodes;\n  }\n\n  _populateFormFields = () => {\n    const { allocationSchema, selectedNodes } = this.state;\n    let { selectedEntities, nodes } = this.props;\n    const username = _.first(selectedEntities);\n\n    const options = nodes.map(node => {\n      const { alias } = node;\n      return { key: alias, text: alias, value: alias };\n    });\n\n    const fields = allocationSchema.map(column => {\n      switch (column) {\n        case 'user_id':\n          return (<div>\n            <Input fluid label={column} disabled={true} value={username} />\n          </div>);\n        case 'node_alias':\n          return (<div>\n            <Dropdown placeholder='Nodes' value={selectedNodes} onChange={(e, { value }) => this.onSelectChange(value, 'selectedNodes')}\n              fluid multiple selection options={options} />\n          </div>);\n        default:\n          return (<div>\n            <Input fluid label={column} onChange={(e) => this.onChange(e, column)} value={this.state[column]} />\n          </div>);\n      }\n    });\n\n    return fields;\n  }\n\n  render() {\n    return (\n      <TransitionModal\n        closeOnDimmerClick={false}\n        animation=\"fade up\"\n        duration={200}\n        onClose={() => this.setClose()}\n        onOpen={() => this.setOpen()}\n        open={this.state.open}\n        trigger={this.props.trigger}\n      >\n        <Modal.Header>Manage Allocations</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Form error>\n              <div className=\"add-node-form-body\">\n                {this._populateFormFields()}\n                <Message\n                  info\n                  header='Details'\n                  content={`You are assiging ${this.props.selectedEntities[0]}, ${this.state.selectedNodes.length}/${this.props.nodes.length} nodes`}\n                />\n              </div>\n            </Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button onClick={() => this.setClose()}>\n            Cancel\n          </Button>\n          <Button\n            content=\"Submit\"\n            onClick={() => this.handleSubmit()}\n            positive\n          />\n        </Modal.Actions>\n      </TransitionModal>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport {\n  Confirm,\n  Input,\n  Popup,\n  Dropdown,\n  Icon,\n  Button,\n  Table,\n  Segment,\n  Header,\n  Message,\n  Pagination,\n  Checkbox,\n} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport { deployerActionDirect } from '../Utils/APIUtil.js';\nimport { capitalize, successNotification } from '../Utils/CommonUtil';\nimport { LoaderProgress } from './CustomComponents';\nimport CONSTANTS from '../Utils/Constants';\nimport ModalAddUser from './ModalAddUser.jsx';\nimport ModalUserAllocation from './ModalUserAllocation.jsx';\n\nconst { ACTIONS } = CONSTANTS;\n\nexport default class Users extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.tableRowLength = 5;\n\n    this.state = {\n      activePage: 1,\n      showConfirm: false,\n      versioned: true,\n      value: 1,\n      loading: true,\n      usersData: [],\n      usersDataSource: [],\n      selectedEntities: [],\n      allocationData: [],\n      nodes: [],\n      loadingPercentage: 10\n    }\n  }\n\n  async componentDidMount() {\n    await this._getIntitalData();\n  }\n\n  markLoadingProgress = (loadingPercentage) => {\n    this.setState({\n      loadingPercentage\n    });\n  }\n\n  _getIntitalData = async () => {\n    let usersData = await deployerActionDirect(ACTIONS.LIST_USER, { status: true });\n    usersData = _.get(usersData, 'data.rows', []);\n    this.markLoadingProgress(30);\n    const usersDataSource = usersData;\n    let allocationData = await deployerActionDirect(ACTIONS.LIST_ALLOCATION);\n    this.markLoadingProgress(70);\n    allocationData = _.get(allocationData, 'data.rows', []);\n    let nodes = await deployerActionDirect(ACTIONS.LIST_NODE);\n    this.markLoadingProgress(100);\n    nodes = _.get(nodes, 'data.rows', []);\n\n    this.setState({\n      loading: false,\n      usersData,\n      usersDataSource,\n      allocationData,\n      selectedEntities: [],\n      nodes\n    });\n\n    this.handlePaginationChange(null, { activePage: 1 });\n  }\n\n  handlePaginationChange = (e, { activePage }) => {\n    let { usersDataSource } = { ...this.state };\n    let usersData = [];\n    for (let index = ((activePage - 1) * this.tableRowLength); index <= ((activePage * this.tableRowLength) - 1); index++) {\n      if (index < usersDataSource.length) {\n        usersData.unshift(usersDataSource[index]);\n      }\n    }\n\n    this.setState({\n      usersData,\n      activePage\n    });\n  }\n\n  handleConfirm = (value) => {\n    this.setState({\n      showConfirm: value\n    });\n  }\n\n  handleConfirmAction = async () => {\n    const { selectedEntities } = this.state;\n    const entity = _.first(selectedEntities);\n    let response = await deployerActionDirect(ACTIONS.DELETE_USER, { target_username: entity });\n    successNotification(_.get(response, 'message', 'Deletion failed'));\n    this.handleConfirm(false);\n    await this._getIntitalData();\n  }\n\n  handleSelect = (username) => {\n    let { selectedEntities } = { ...this.state };\n    const entitySelected = _.includes(selectedEntities, username);\n    if (entitySelected) {\n      selectedEntities = _.remove(selectedEntities, function (entity) {\n        return (entity !== username);\n      });\n    } else {\n      selectedEntities.push(username);\n    }\n    this.setState({\n      selectedEntities\n    });\n  }\n\n  _renderUserAccessibility = (status) => {\n    return JSON.parse(status) ? <Icon color='green' name='checkmark' size='large' /> : <div />;\n  }\n  _getNodesForUser = (username) => {\n    const { allocationData } = this.state;\n    const thisNodeAllocationList = _.filter(allocationData, (allocation) => {\n      return (allocation.user_id === username);\n    });\n    let nodes = thisNodeAllocationList.map(item => {\n      return item.node_alias;\n    });\n    nodes = _.union(nodes);\n    if (nodes.length === 0) {\n      return <Button>{nodes.length}</Button>;\n    }\n    return (<Popup trigger={<Button>{nodes.length}</Button>} flowing hoverable>\n      <div>\n        {\n          nodes.map(user => {\n            return <div>{user}</div>;\n          })\n        }\n      </div>\n    </Popup>)\n  }\n\n  _renderClusterTable = (data) => {\n    let tableRowData = [\n      {\n        width: 1,\n        header: '',\n        dataPath: ['username'],\n        formatter: (username) => (\n          <Checkbox name={username} onChange={() => this.handleSelect(username)}\n            checked={_.includes(this.state.selectedEntities, username)} />)\n      },\n      {\n        width: 4,\n        header: 'Username',\n        dataPath: ['username']\n      },\n      {\n        width: 2,\n        header: 'Role',\n        dataPath: ['role'],\n        formatter: capitalize\n      },\n      {\n        width: 4,\n        header: 'Email',\n        dataPath: ['email']\n      },\n      {\n        width: 2,\n        header: 'Owner',\n        dataPath: ['owner']\n      },\n      {\n        width: 1,\n        header: 'Nodes',\n        dataPath: ['username'],\n        formatter: this._getNodesForUser\n      },\n      {\n        width: 1,\n        header: 'Acessible',\n        dataPath: ['access'],\n        formatter: this._renderUserAccessibility\n      }\n    ];\n\n    const tableData = data.map(row => {\n      return tableRowData.map(item => {\n        const hasFormater = _.get(item, 'formatter', null);\n        if (hasFormater) {\n          // Handle if function output is passed instead of reference\n          try {\n            const results = item.dataPath.map(dp => {\n              if (dp === '[object]') {\n                return row;\n              }\n              return _.get(row, dp, '-');\n            });\n            return hasFormater(...results);\n          } catch {\n            return hasFormater || '-';\n          }\n        }\n        return _.get(row, item.dataPath[0], '-');\n      });\n    });\n\n    if (_.isEmpty(data)) {\n      return (LoaderProgress(this.state.loadingPercentage));\n    }\n\n    return (\n      <div>\n        <div className=\"w-100 flex-row flex-jc-fe\">\n          <Pagination\n            firstItem={null}\n            lastItem={null}\n            activePage={this.state.activePage}\n            onPageChange={this.handlePaginationChange}\n            totalPages={Math.ceil(this.state.usersDataSource.length / this.tableRowLength)}\n          />\n        </div>\n        <Table celled>\n          <Table.Header>\n            <Table.Row>\n              {\n                tableRowData.map(item => {\n                  return <Table.HeaderCell width={item.width}>{item.header}</Table.HeaderCell>;\n                })\n              }\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {\n              tableData.map(row => {\n                return <Table.Row>{\n                  row.map(cell => {\n                    return <Table.Cell>{cell}</Table.Cell>\n                  })\n                }</Table.Row>;\n              })\n            }\n          </Table.Body>\n        </Table>\n      </div>\n    )\n  }\n\n  _renderPage = () => {\n    const { usersData, selectedEntities, nodes,\n      allocationData, showConfirm } = this.state;\n\n    return (\n      <Segment.Group>\n        <Header as='h5' attached='top'>\n          <div>Users</div>\n        </Header>\n        <Segment>\n          <ModalAddUser\n            refreshTable={this._getIntitalData}\n            trigger={<Button icon labelPosition='right' primary>\n              <Icon name='add' />\n              User\n            </Button>} />\n          <Dropdown\n            button\n            text='Actions'>\n            <Dropdown.Menu>\n              <Dropdown.Item disabled={(selectedEntities.length !== 1)} text='Update' />\n              <ModalUserAllocation\n                refreshTable={this._getIntitalData}\n                allocationData={allocationData}\n                nodes={nodes}\n                selectedEntities={selectedEntities}\n                trigger={<Dropdown.Item disabled={(selectedEntities.length !== 1)}\n                  text='Manage Allocations' />} />\n              <Dropdown.Item disabled={(selectedEntities.length !== 1)} onClick={() => this.handleConfirm(true)} text='Delete' />\n            </Dropdown.Menu>\n          </Dropdown>\n          <Input icon='search' placeholder='Search...' />\n\n          <Message>\n            <p>Viewing all {usersData.length} Users</p>\n          </Message>\n        </Segment>\n        <Segment>\n          <Confirm\n            confirmButton={<Button negative>\n              Delete\n            </Button>}\n            open={showConfirm}\n            content={`Are you sure you want delete: ${selectedEntities.join(\", \")} ?`}\n            onCancel={() => this.handleConfirm(false)}\n            onConfirm={this.handleConfirmAction}\n          />\n          {this._renderClusterTable(usersData)}\n        </Segment>\n      </Segment.Group>\n    );\n  }\n\n  render() {\n    return (this._renderPage());\n  }\n}\n","import React, { Component } from 'react';\nimport { Dropdown, Icon, Menu } from 'semantic-ui-react';\nimport { capitalize, setcurrentPage, getcurrentPage, getLogin } from '../Utils/CommonUtil';\nimport CONSTANT from '../Utils/Constants';\nimport Dashboard from './Dashboard';\nimport Cluster from './Cluster';\nimport Storage from './Storage';\nimport Users from './Users';\n\nconst { role } = getLogin();\nconst isAdmin = (role === CONSTANT.USER_ROLE.ADMIN);\nconst { PAGES } = CONSTANT;\n\nexport default class MenuComponent extends Component {\n    state = {\n        activeItem: getcurrentPage() || PAGES.DASHBOARD\n    }\n\n    handleItemClick = (e, { name }) => {\n        this.setState({ activeItem: name });\n    }\n\n    _renderPage = (pageName) => {\n        setcurrentPage(pageName);\n        switch (pageName) {\n            case PAGES.DASHBOARD:\n                return <Dashboard />\n            case PAGES.CLUSTER:\n                return <Cluster />\n            case PAGES.STORAGE:\n                return <Storage />\n            case PAGES.USERS_LIST:\n                return isAdmin ? <Users /> : <Dashboard />;\n            default:\n                return <div />\n        }\n    }\n\n    render() {\n        const { activeItem } = this.state\n\n        return (\n            <div className=\"content-panel\">\n                <Menu className=\"menu-vertical-home\" vertical>\n                    <Menu.Item\n                        name={PAGES.DASHBOARD}\n                        active={activeItem === PAGES.DASHBOARD}\n                        onClick={this.handleItemClick}\n                    >\n                        <Icon name='grid layout' />\n                        {capitalize(PAGES.DASHBOARD)}\n                    </Menu.Item>\n                    <Menu.Item\n                        name={PAGES.CLUSTER}\n                        active={activeItem === PAGES.CLUSTER}\n                        onClick={this.handleItemClick}\n                    >\n                        <Icon name='cloud' />\n                        {capitalize(PAGES.CLUSTER)}\n                    </Menu.Item>\n\n                    {isAdmin && <Menu.Item>\n                        User Access Control\n                        <Menu.Menu>\n                            <Menu.Item\n                                name={PAGES.USERS_LIST}\n                                active={activeItem === PAGES.USERS_LIST}\n                                onClick={this.handleItemClick}\n                            >\n                                {capitalize(PAGES.USERS_LIST)}\n                            </Menu.Item>\n                            <Menu.Item\n                                name={PAGES.MAP}\n                                active={activeItem === PAGES.MAP}\n                                onClick={this.handleItemClick}\n                            >\n                                {capitalize(PAGES.MAP)}\n                            </Menu.Item>\n                        </Menu.Menu>\n                    </Menu.Item>}\n\n                    <Menu.Item\n                        name={PAGES.STORAGE}\n                        active={activeItem === PAGES.STORAGE}\n                        onClick={this.handleItemClick}\n                    >\n                        <Icon name='server' />\n                        {capitalize(PAGES.STORAGE)}\n                    </Menu.Item>\n\n                    <Dropdown item text='More'>\n                        <Dropdown.Menu>\n                            <Dropdown.Item icon='edit' text='Edit Profile' />\n                            <Dropdown.Item icon='globe' text='Choose Language' />\n                            <Dropdown.Item icon='settings' text='Account Settings' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu>\n                <div className=\"content-section\">\n                    {this._renderPage(activeItem)}\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport ReactNotification from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css'\nimport NavigationBar from './NavigationBar';\nimport Menu from './Menu';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'animate.css/animate.compat.css'\nimport { isloggedIn } from '../Utils/APIUtil.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedIn: false\n    }\n  }\n\n  async componentDidMount() {\n    const loggedIn = await isloggedIn();\n    this.setState({\n      loggedIn\n    });\n    this.props.setAppLoader(false);\n  }\n\n  _renderPage = () => {\n    return (\n      <div>\n        <ReactNotification />\n        <NavigationBar setAppLoader={this.props.setAppLoader} />\n        <Menu />\n      </div>\n    );\n  }\n\n  render() {\n    return (this._renderPage());\n  }\n}\n\nexport default App;\n\n","import React, { Component } from 'react';\nimport {\n  Dimmer,\n  Loader\n} from 'semantic-ui-react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LoginForm from './Components/LoginForm';\nimport Home from './Components/Home';\nimport 'semantic-ui-css/semantic.min.css'\nimport { isloggedIn } from './Utils/APIUtil.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      loggedIn: false\n    }\n  }\n\n  setAppLoader = (loading) => {\n    this.setState({\n      loading\n    });\n  }\n\n  async componentDidMount() {\n    const loggedIn = await isloggedIn();\n\n    this.setState({\n      loggedIn,\n      loading: false\n    });\n  }\n\n  _renderPage = () => {\n    const { loading, loggedIn } = this.state;\n    const _loader = (\n      <Dimmer active inverted>\n        <Loader content='Loading' />\n      </Dimmer>\n    );\n\n    if (loading) {\n      return (_loader);\n    }\n\n    if (loggedIn) {\n      return (\n        <Home setAppLoader={this.setAppLoader} />\n      );\n    }\n\n    return (\n      <LoginForm\n        setAppLoader={this.setAppLoader} />\n    );\n  }\n\n  render() {\n    return (<Router>\n      <Switch>\n        <Route exact path=\"/\"\n          render={() => (\n            this._renderPage())}></Route>\n      </Switch>\n    </Router>);\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}