{"version":3,"sources":["images/visa.svg","images/bank.svg","Components/TaskWidget/TaskWidget.js","Components/NeoCreditCard/NeoCreditCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TaskWidget","getColorTheme","type","NUM_COLOR","NUM_BG","DONUT_COLORS","_this$props","this","props","classes","percentage","title","progressInfo","duration","_this$getColorTheme","data","name","value","react_default","a","createElement","Card","className","card","header","Tooltip","aria-label","placement","Info_default","style","marginLeft","fontSize","topPanel","es6","width","height","onMouseEnter","onPieEnter","cx","cy","startAngle","endAngle","innerRadius","outerRadius","fill","paddingAngle","stroke","dataKey","map","_","index","key","concat","length","CardActions","actions","disableActionSpacing","color","marginBottom","percentBox","backgroundColor","React","Component","withStyles","theme","maxWidth","display","flexDirection","justifyContent","alignItems","padding","margin","borderRadius","StatusCard","state","showDetails","revealDetailsToggle","e","_this","setState","maskDetails","input","replace","maskCardNumber","octets","split","semioctet","_this2","holderName","cardNumber","validThru","cvv","alt","src","bankImg","visaImg","onClick","class","App","loading","setTimeout","_this$state","components","path","el","Grid","container","justify","spacing","item","xs","sm","md","lg","xl","Components_TaskWidget_TaskWidget","NeoCreditCard_NeoCreditCard","unshift","href","Fragment","react_router_dom","react_router","exact","render","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa828753.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/visa.6340b908.svg\";","module.exports = __webpack_public_path__ + \"static/media/bank.751793ea.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport InfoIcon from '@material-ui/icons/Info';\nimport Card from '@material-ui/core/Card';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CardActions from '@material-ui/core/CardActions';\nimport './TaskWidget.css';\nimport {\n  PieChart, Pie, Cell,\n} from 'recharts';\n\nconst styles = theme => ({\n  card: {\n    width: '100%',\n    maxWidth: 300,\n    height: 400\n  },\n  header: {\n    backgroundColor: \"#336278\",\n    color: \"#90A4AE\",\n    width: \"100%\",\n    height: 50,\n    display: \"flex\",\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '12px 0px 12px 0px',\n  },\n  actions: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n    backgroundColor: '#1C4354'\n  },\n  topPanel: {\n    backgroundColor: \"#336278\",\n    height: 140,\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  percentBox: {\n    fontSize: \"2em\",\n    padding: \"0.3em\",\n    margin: \"0.1em\",\n    borderRadius: '4px'\n  }\n});\n\nclass TaskWidget extends React.Component {\n  getColorTheme = (type) => {\n    let NUM_COLOR = \"#CDDC39\";\n    let NUM_BG = \"rgba(205,220,57,0.1)\";\n    let DONUT_BG = \"rgba(255,255,255,0.1)\";\n    let DONUT_COLORS = [\n      NUM_COLOR,\n      'rgba(255,255,255,0.1)',\n    ];\n    switch (type) {\n      case 'success':\n        NUM_COLOR = \"#CDDC39\";\n        NUM_BG = \"rgba(205,220,57,0.1)\";\n        break;\n      case 'error':\n        NUM_COLOR = \"#f44336\";\n        NUM_BG = \"rgba(244,67,54,0.1)\";\n        break;\n      case 'warning':\n        NUM_COLOR = \"#FFCA28\";\n        NUM_BG = \"rgba(255,202,42,0.1)\";\n        break;\n      default:\n        break;\n    }\n    DONUT_COLORS = [\n      NUM_COLOR,\n      DONUT_BG,\n    ];\n    return { DONUT_COLORS, NUM_COLOR, NUM_BG };\n\n  }\n  render() {\n    let { classes, percentage, type, title, progressInfo, duration } = this.props;\n    if (type === \"error\") {\n      duration = 'Unable';\n    };\n    const { NUM_COLOR, DONUT_COLORS, NUM_BG } = this.getColorTheme(type);\n    const data = [\n      {\n        name: 'Completed',\n        value: percentage\n      },\n      {\n        name: 'Remaining',\n        value: (100 - percentage)\n      }\n    ];\n\n    return (\n        <Card className={classes.card}>\n          <span className={classes.header}>\n            {title}\n            <Tooltip title={progressInfo} aria-label=\"add\" placement=\"right-start\">\n              <InfoIcon style={{ marginLeft: '5px'}} fontSize=\"small\"/>\n            </Tooltip>\n          </span>\n          <div className={classes.topPanel}>\n            <PieChart width={220} height={200} onMouseEnter={this.onPieEnter}>\n              <Pie\n                data={data}\n                cx={105}\n                cy={60}\n                startAngle={210}\n                endAngle={-30}\n                innerRadius={41}\n                outerRadius={59}\n                fill=\"#8884d8\"\n                paddingAngle={0}\n                stroke={0}\n                dataKey=\"value\"\n              >\n                {data.map((_, index) =>\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={DONUT_COLORS[index % DONUT_COLORS.length]} />)}\n              </Pie>\n            </PieChart>\n          </div>\n          <CardActions className={classes.actions} disableActionSpacing>\n            <div style={{ fontSize: \"0.85em\", color: \"#999\", marginBottom: '1em' }}>\n              Overall Job Progress\n            </div>\n            <div>\n              <span className={classes.percentBox} style={{ color: NUM_COLOR, backgroundColor: NUM_BG }} >\n                {percentage}\n              </span>\n              <span style={{ fontSize: \"0.7em\", color: NUM_COLOR }} >\n                {`${duration} to finish`}\n              </span>\n            </div>\n          </CardActions>\n        </Card>\n    );\n  }\n}\n\nTaskWidget.propTypes = {\n  classes: PropTypes.object.isRequired,\n  percentage: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\n\nexport default withStyles(styles)(TaskWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport visaImg from '../../images/visa.svg';\nimport bankImg from '../../images/bank.svg';\nimport './NeoCreditCard.css';\n\nclass StatusCard extends React.Component {\n  state = {\n    showDetails: false,\n  }\n\n  revealDetailsToggle = (e) => {\n    const showDetails = this.state.showDetails;\n    this.setState({\n      showDetails: !showDetails\n    });\n  }\n\n  maskDetails = (input) => {\n    if (!this.state.showDetails) {\n      return input.replace(/[0-9]/g, '•');\n    } else {\n      return input;\n    }\n  }\n\n  maskCardNumber = (input) => {\n    if (!this.state.showDetails) {\n      const octets = input.split(' ');\n      const semioctet = `${octets[0]} ${octets[1]} ${octets[2]} `; \n      return `${semioctet.replace(/[0-9]/g, '•')} ${octets[3]}`;\n    } else {\n      return input;\n    }\n  }\n\n  render() {\n    let { holderName, cardNumber, validThru, cvv, className } = this.props;\n\n    return (\n      <div className={`card ${className}`}>\n        <div className=\"card-body\">\n          <div className=\"card-two-col top-header\">\n            <div className=\"bank-name\">\n              <img alt=\"icon\" src={bankImg} />\n              <span>LOREM IPSUM</span>\n            </div>\n            <img alt=\"logo\" className=\"card-logo\" src={visaImg} />\n          </div>\n          <p className=\"card-numer\">{ this.maskCardNumber(cardNumber) }</p>\n          <div>\n            <p className=\"card-info\">{ holderName }</p>\n          </div>\n          <div className=\"card-two-col\">\n            <div>\n              <span className=\"card-label\">Expires</span>\n              <p className=\"card-info\">{ this.maskDetails(validThru) }</p>\n            </div>\n            <div>\n              <span className=\"card-label\">CVV</span>\n              <p className=\"card-info\">{ this.maskDetails(cvv) }</p>\n            </div>\n            <div>\n              <div onClick={ (e) => this.revealDetailsToggle(e) } className={ `btn ${this.state.showDetails ? 'active' : '' }` }>\n                <div class=\"inner-wrapper\">\n                  <i class=\"material-icons-round\">{ this.state.showDetails ? 'lock' : 'lock_open' }</i>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nStatusCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n  percentage: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired\n};\n\nexport default StatusCard;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport TaskWidget from './Components/TaskWidget/TaskWidget';\nimport NeoCreditCard from './Components/NeoCreditCard/NeoCreditCard';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        cardNumber: \"000 090 1234 6258\",\n        validThru: \"01/09\",\n        cvv: \"076\",\n        loading: true\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.setState({\n                loading: false\n            });\n        }, 700);\n    }\n\n\n    render() {\n        const { loading, cardNumber, validThru, cvv } = this.state;\n        const xs = 8;\n        const sm = 8;\n        const md = 4;\n        const lg = 3;\n        const xl = 3;\n\n        let components = [\n            {\n                path: \"/components/taskwidget\",\n                el: (\n                    <Grid className=\"outer-grid-container\" container justify=\"center\" spacing={2}>\n                        <Grid item xs={10} sm={10} md={10} lg={10} xl={10}>\n                            <Grid container justify=\"center\" spacing={4}>\n                                <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n                                    <TaskWidget type=\"success\" percentage={45}\n                                        progressInfo=\"Deploying Containers 11/20\"\n                                        duration=\"12h\"\n                                        title=\"JS001\" />\n                                </Grid>\n                                <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n                                    <TaskWidget type=\"error\" percentage={55}\n                                        duration=\"0h\"\n                                        progressInfo=\"Failed to deploy containers 9/20\" title=\"JE002\" />\n                                </Grid>\n                                <Grid item xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n                                    <TaskWidget type=\"warning\" percentage={65}\n                                        duration=\"17h\"\n                                        progressInfo=\"Failed to cleanup stale containers 1/20\" title=\"JW003\" />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                )\n            },\n            {\n                path: \"/components/neo\",\n                el: (\n                    <NeoCreditCard\n                        type=\"visa\"\n                        className={loading ? \"hidden\" : \"\"}\n                        holderName=\"HDesign In\"\n                        cardNumber={cardNumber}\n                        validThru={validThru}\n                        cvv={cvv} />\n                )\n            }\n        ];\n        components.unshift({\n            path: \"/\",\n            el: <div>{ components.map(item => <div><a href={item.path}>{item.path}</a></div>) }</div>\n        })\n\n        const routerMappedComponents = () => {\n            return components.map(item => (\n                <Route exact path={item.path}\n                    render={() => item.el}></Route>\n            ));\n        }\n\n        return (\n            <>\n                <Router>\n                    <Switch>\n                        {routerMappedComponents()}\n                    </Switch>\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}